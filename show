#!/usr/bin/python3
# -*- coding: utf-8 -*-

import os, sys
import pstr
import click
import time, stat
import subprocess 
import os 
import humanize as hz

#####3 this variable
pss = pstr.pcolor().Pss
ts = time.sleep
cmd = os.system

############################################################
@click.command()
@click.argument("fd")
####################################### thsi for Directory
def info_fd(fd):
    y, x = click.get_terminal_size()
    if y < 90 and x < 15:
        print('Please Beg the terminal size for cuntune')
        sys.exit(1)

    try:
        if os.path.dirname(fd):
            os.chdir(os.path.dirname(fd))
        
        data1 = subprocess.Popen(["file",'-b', fd], stdout=subprocess.PIPE)
        output1 = str(data1.communicate()[0]).replace("'", '') 

        base = os.path.basename(fd)
        split = os.path.splitext(fd)

        data = subprocess.Popen(["ls", '-l', fd], stdout=subprocess.PIPE)
        output = str(data.communicate()[0]).split(" ")

        mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime = os.stat(fd)
        ### variable :
        size = os.path.getsize(fd)
        Owner_uid_name = ''
        Owner_gid_name = ''
        Owner_uid_num = uid
        Owner_gid_num = gid
        file_name = base.split(".")[0]
        full_name = base
        end_file = split[1]
        is_link = False
        len_link = nlink
        created = time.ctime(ctime)
        last_accessed = time.ctime(atime)
        last_modified = time.ctime(mtime)
        mode_m = mode
        FR = ''
        F1 = ''
        F2 = ''
        SAB_ = ''
        mode_houman = ''.split("\n")
        Indoe_dev = ino, dev
        Info_fd = output1[1:-2]
        platform = sys.platform
        total = '' #.replace("\n",' ')

        count = -1

        if os.path.isfile(fd) and size != 0:
            try:
                with open(fd, 'r') as Fs:

                    F1 = Fs.readline() # frist line
                    F2 = Fs.readlines()[count] # last line
                    FF1 = F1.replace("\n","")
                    total = size
                    Owner_uid_name = output[2]
                    Owner_gid_name = output[3]

                    py1 = "#!/usr/bin/"
                    py2 = "#!/usr/local/bin/"
                    Scr = "Script "

                    Type_file = {
                        py1+'python3' : f'Python {Scr}',
                        py1+'python2' : f'Python {Scr}',
                        f"{FF1}"      : f'Text'
                    }
                    DA = Type_file[FF1]
                    SAB_ = end_file.upper().strip('.')

            except UnicodeDecodeError:
                print(" Ops! this file can't readable ...!")
        if os.path.islink(fd):
            is_link = True

        r = '<!r>'
        g = '<!g>'
        y = '<!y>'

        if os.path.isfile(fd):
            mode_houman = output[0]
            if os.path.getsize(fd) != 0 or 1:
                Owner_uid_name = output[2]
                Owner_gid_name = output[3]
                count = 0

            fiss = pss(f"""
    {r}[*] {g}Frist Line             :{y} {F1.strip()}
    {r}[*] {g}Last Line              :{y} {F2}
    {r}[*] {g}Type file              :{y} {SAB_}
    {r}[*] {g}File name              :{y} {file_name}
    {r}[*] {g}Full name              :{y} {full_name}
    {r}[*] {g}End file               :{y} {end_file}
      """)
            print(fiss)
        if os.path.isdir(fd) and os.path.getsize(fd) != 0:
            mode_houman = output[1][4:]
            total = output[0:3][1].strip('d\\nrwx-')
            # total_1 = str(total).replace("\n"," ")
            # total = total_1

            Owner_uid_name = output[3]
            Owner_gid_name = output[4]

        elif os.path.getsize(fd) == 0:
            Owner_uid_name = ''
            Owner_gid_name = ''
            print(pss("This file is size 0 no inforations About this file !"))

        if os.path.isfile(fd):
            FR = 'File'
            
        elif os.path.isdir(fd):
            FR = "Directory"

        iNFO = pss(f"""\
    {r}[*] {g}Type this              :{y} {FR}
    {r}[*] {g}is Link                :{y} {is_link}
    {r}[*] {g}Size                   :{y} {hz.naturalsize(size)}
    {r}[*] {g}Total Size             :{y} {hz.naturalsize(total)}
    {r}[*] {g}Owner by name          :<!c> User:<!e> {Owner_uid_name} <!c>Group:<!e> {Owner_gid_name}
    {r}[*] {g}Owner by number        :<!c> User:<!e> {Owner_uid_num}  <!c>Group:<!e> {Owner_gid_num}
    {r}[*] {g}Links                  :{y} {len_link} Links
    {r}[*] {g}Created                :{y} {time.ctime(ctime)}
    {r}[*] {g}Last accessed          :{y} {time.ctime(atime)}
    {r}[*] {g}Last modified          :{y} {time.ctime(mtime)}
    {r}[*] {g}Mode                   :{y} {mode_m}
    {r}[*] {g}Mode houman            :{y} {mode_houman[2:]}
    {r}[*] {g}Inode/dev              :{y} inode: {ino} dev: {dev}
    {r}[*] {g}Path file              :{y} {os.getcwd()}
    {r}[*] {g}Info about this        :{y} {Info_fd}
    {r}[*] {g}Platform               :{y} {platform}
          """) # {os.path.split(fd)[0]}
        
        print(iNFO)
    
    except FileNotFoundError as Ferr:
        print(pss(f" <!r>[âœ—] Oh no this {Ferr} file name not found <!e>"))

if __name__ == '__main__':
    info_fd()
